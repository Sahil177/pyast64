def f(inputs):
    tree_search(inputs)

def tree_search(inputs):
    alphas_num = inputs[0]
    Ws_num = inputs[1]
    out = inputs[2]
    counter = inputs[3]
    timesteps_p = inputs[23]
    timesteps = timesteps_p[0]  

    test_input = array(31)
    for i in range(21):
        val = inputs[4+i]
        test_input[i] = val

    for i in range(timesteps):
        alpha = alphas_num[i]
        alpha_inp = inputs[30+alpha]
        test_input[26 + i] = alpha_inp
        W = Ws_num[i]
        W_inp = inputs[25+W]
        test_input[21+i] = W_inp

    input_copy = array(25)

    num_points_copy = array(1)
    inputs_copy[0] = num_points_copy
    num_points_p = inputs[7]
    num_points = num_points_p[0]
    num_points_copy[0] = num_points

    input_dim_copy = array(1)
    input_copy[1] = input_dim_copy
    input_dim_p = inputs[8]
    input_dim = input_dim_p[0]
    input_dim_copy[0] = input_dim

    hidden_dim_copy = array(1)
    input_copy[2] = hidden_dim_copy
    hidden_dim_p = inputs[9]
    hidden_dim = hidden_dim_p[0]
    hidden_dim_copy[0] = hidden_dim

    input_copy[3] = array(1)
    input_copy[3] = hidden_dim_copy

    test_inps_copy = array(num_points*input_dim)
    input_copy[4] = test_inps_copy
    test_inps = inputs[11]
    for i in range(num_points*input_dim):
        val = test_inps[i]
        test_inps_copy[i] = val

    W1_copy = array(input_dim*hidden_dim)
    input_copy[5] = W1_copy
    W1_ = inputs[12]
    for i in range(input_dim*hidden_dim):
        val = W1_[i]
        W1_copy[i] = val

    b1_copy = array(hidden_dim)
    input_cop[6] = b1_copy
    b1 = inputs[13]
    for i in range(hidden_dim):
        val = b1[i]
        b1_copy[i] = val

    W2_copy = array(hidden_dim*hidden_dim)
    input_copy[7] = W2_copy
    W2_ = inputs[14]
    for i in range(hidden_dim*hidden_dim):
        val = W2_[i]
        W2_copy[i] = val

    b2_copy = array(hidden_dim)
    input_copy[8] = b2_copy
    b2 = inputs[15]
    for i in range(hidden_dim):
        val = b2[i]
        b2_copy[i] = val

    W3_copy = array(hidden_dim)
    input_copy[9] = W3_copy
    W3_ = inputs[16]
    for i in range(hidden_dim):
        val = W3_[i]
        W3_copy[i] = val

    b3_copy = array(1)
    input_copy[10] = b3_copy
    b3 = inputs[17]
    for i in range(1):
        val = b3[i]
        b3_copy[i] = val

    timesteps_copy = array(1)
    inputs_copy[16] = timesteps_copy
    val = timesteps
    timesteps_copy[0] = val

    numskills_copy = array(1)
    inputs_copy[17] = numskills_copy
    num_skills_p = inputs[24]
    numskills = num_skills_p[0]
    numskills_copy[0] = numskills

    size_p = inputs[6]
    size = size_p[0]

    Ws1_copy = array(size*size)
    inputs_copy[18] = Ws1_copy
    Ws1 = inputs[25]
    for i in range(size*size):
        val = Ws1[i]
        Ws1_copy[i] = val   

    Ws2_copy = array(size*size)
    inputs_copy[19] = Ws2_copy
    Ws2 = inputs[26]
    for i in range(size*size):
        val = Ws2[i]
        Ws2_copy[i] = val

    Ws3_copy = array(size*size)
    inputs_copy[20] = Ws3_copy
    Ws3 = inputs[27]
    for i in range(size*size):
        val = Ws3[i]
        Ws3_copy[i] = val

    Ws4_copy = array(size*size)
    inputs_copy[21] = Ws4_copy
    Ws4 = inputs[28]
    for i in range(size*size):
        val = Ws4[i]
        Ws4_copy[i] = val

    Ws5_copy = array(size*size)
    inputs_copy[22] = Ws5_copy
    Ws5 = inputs[29]
    for i in range(size*size):
        val = Ws5[i]
        Ws5_copy[i] = val            

    alpha1_copy = array(2)
    inputs_copy[23] = alpha1_copy
    alpha1 = inputs[30]
    for i in range(2):
        val = alpha1[i]
        alpha1_copy[i] = val  

    alpha2_copy = array(2)
    inputs_copy[24] = alpha2_copy
    alpha2 = inputs[31]
    for i in range(2):
        val = alpha2[i]
        alpha2_copy[i] = val   

    test(test_input)

    val = counter[0]

    outloc = test_input[1]
    outval = outloc[0]

    cur_alpha = alphas_num[timesteps-1]
    cur_W = Ws_num[timesteps-1]

    ind = 2*val+1 + 25

    out[ind] = cur_alpha
    out[ind + 1] = cur_W

    val = counter[0]
    out[val + 1] = outval

    val += 1
    counter[0] = val

    out[75+val] = timesteps

    num_points = num_points_copy[0]
    num_points_p[0] = num_points

    input_dim = input_dim_copy[0]
    input_dim_p[0] = input_dim

    hidden_dim = hidden_dim_copy[0]
    hidden_dim_p[0] = hidden_dim

    hidden_dim_p2 = inputs[4]
    hidden_dim_p2[0] = hidden_dim

    for i in range(num_points*input_dim):
        val = test_inps_copy[i]
        test_inps[i] = val

    for i in range(input_dim*hidden_dim):
        val = W1_copy[i]
        W1_[i] = val

    for i in range(hidden_dim):
        val = b1_copy[i]
        b1[i] = val

    for i in range(hidden_dim*hidden_dim):
        val = W2_copy[i]
        W2_[i] = val

    for i in range(hidden_dim):
        val = b2_copy[i]
        b2[i] = val

    for i in range(hidden_dim):
        val = W3_copy[i]
        W3_[i] = val
    
    for i in range(1):
        val = b3_copy[i]
        b3[i] = val
    
    val = timesteps_copy[0]
    timesteps_p[0] = val

    numskills = numskills_copy[0]
    num_skills_p[0] = numskills

    for i in range(size*size):
        val = Ws1_copy[i]
        Ws1[i] = val 

    for i in range(size*size):
        val = Ws2_copy[i]
        Ws2[i] = val 

    for i in range(size*size):
        val = Ws3_copy[i]
        Ws3[i] = val 

    for i in range(size*size):
        val = Ws4_copy[i]
        Ws4[i] = val 

    for i in range(size*size):
        val = Ws5_copy[i]
        Ws5[i] = val 

    for i in range(2):
        val = alpha1_copy[i]
        alpha1[i] = val  

    for i in range(2):
        val = alpha2_copy[i]
        alpha2[i] = val  

    if outval < 95:
        if timesteps < 5:
            timesteps += 1
            timesteps_p[0] = timesteps
            if 30 < outval:
                for i in range(2):
                    cur_val = out[0]
                    val = counter[0]
                    if cur_val < 95:
                        alphas_num[timesteps - 1] = i
                        for j in range(5):
                            cur_val = out[0]
                            val = counter[0]
                            if cur_val < 95:
                                Ws_num[timesteps-1] = j
                                tree_search(inputs)
                                timesteps_p[0] = timesteps
    else:
        out[0] = outval
   

def test(inputs):
    test_labels = inputs[0]
    out = inputs[1]
    num_points_p = inputs[3]
    num_points = num_points_p[0]
    skill_comb_inp = array(29)
    for i in range(29):
        val = inputs[i+2]
        skill_comb_inp[i] = val

    skill_comb(skill_comb_inp)

    timesteps_p = inputs[19]
    timesteps = timesteps_p[0]

    outs = skill_comb_inp[11+timesteps]
    hidden_dim_p = inputs[5]
    hidden_dim = hidden_dim_p[0]

    correct = 0
    for i in range(num_points):
        pred_out = outs[i*hidden_dim]
        label = test_labels[i]
        if pred_out < 0:
            if label == 0:
                correct += 1
        else:
            if 0 < pred_out:
                if label == 1:
                    correct +=1
    
    out[0] = correct

    for  i in range(5):
        outc = inputs[14+i]
        iters = hidden_dim*num_points
        for j in range(iters):
            outc[j] = 0




def skill_comb(inputs):
    num_inputs_p = inputs[0]
    batch_dim_p = inputs[1]
    input_dim_p = inputs[2]
    hidden_dim_p = inputs[3]
    output_dim_p = inputs[4]
    x = inputs[5]
    W1 = inputs[6]
    b1 = inputs[7]
    W2 = inputs[8]
    b2 = inputs[9]
    W3 = inputs[10]
    b3 = inputs[11]
    out1 = inputs[12]
    out2 = inputs[13]
    out3 = inputs[14]
    out4 = inputs[15]
    out5 = inputs[16]
    timesteps_p = inputs[17]
    skills_p = inputs[18]

    num_inputs = num_inputs_p[0]

    inputs_copy = array(num_inputs)

    for i in range(num_inputs):
        val = inputs[i+1]
        inputs_copy[i] = val

    timesteps = timesteps_p[0]
    skills = skills_p[0]
    for t in range(timesteps):
        Ws = inputs[num_inputs + 3 + t]
        alpha = inputs[num_inputs + 3 + 5 + t]

        W_func(inputs, num_inputs, Ws)

        for s in range(skills):
            flag = alpha[s]
            if flag == 1:
                if s == 0:
                    fc(inputs)
                else:
                    ReLU(inputs)

        for i in range(num_inputs):
            val = inputs_copy[i]
            inputs[i+1] = val
        

def W_func(inputs, num_inputs, Wsx):
    outputs = array(num_inputs)


    for i in range(num_inputs):
        sum = 0
        for j in range(num_inputs):
            sum += inputs[j+1]*Wsx[i*num_inputs + j]
        outputs[i] = sum

    for i in range(num_inputs):
        inputs[i+1] = outputs[i] 


def fc(inputs):
    batch_dim_p = inputs[1]
    batch_dim = batch_dim_p[0]
    input_dim_p = inputs[2]
    input_dim = input_dim_p[0]
    output_dim_p = inputs[3]
    output_dim = output_dim_p[0]
    x = inputs[4]
    W = inputs[5]
    b = inputs[6]
    out = inputs[7]

    for k in range(batch_dim):
        for i in range(output_dim):
            sum = 0
            for j in range(input_dim):
                sum += x[k*input_dim +j]*W[i*input_dim+j]
            sum += b[i]
            out[k*output_dim + i] = sum

def ReLU(inputs):
    batch_dim_p = inputs[1]
    N_p = inputs[2]
    N = N_p[0]*batch_dim_p[0]
    x = inputs[3]
    out = inputs[4]
    for i in range(N):
        val = x[i]
        if val < 0:
            out[i] = 0
        else:
            out[i] = val

    


